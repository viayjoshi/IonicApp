{"version":3,"sources":["../../../src/@ionic-native/plugins/stepcounter/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASH,IAAa,WAAW;IAAS,+BAAiB;IAAlD;;IAmDA,CAAC;IAjDC;;;;;OAKG;IAEH,2BAAK,GAAL,UAAM,cAAsB,IAA2B,MAAM,CAAC,CAAC,CAAC;IAEhE;;;OAGG;IAEH,0BAAI,GAAJ,cAAgC,MAAM,CAAC,CAAC,CAAC;IAEzC;;;OAGG;IAEH,uCAAiB,GAAjB,cAA6C,MAAM,CAAC,CAAC,CAAC;IAEtD;;;OAGG;IAEH,kCAAY,GAAZ,cAAwC,MAAM,CAAC,CAAC,CAAC;IAEjD;;;OAGG;IAEH,yCAAmB,GAAnB,cAAgD,MAAM,CAAC,CAAC,CAAC;IAEzD;;;OAGG;IAEH,gCAAU,GAAV,cAA6B,MAAM,CAAC,CAAC,CAAC;IAOxC,kBAAC;AAAD,CAnDA,AAmDC,CAnDgC,iBAAiB,GAmDjD;AANM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAzCA;IADC,OAAO,EAAE;;;;wCACsD;AAOhE;IADC,OAAO,EAAE;;;;uCAC+B;AAOzC;IADC,OAAO,EAAE;;;;oDAC4C;AAOtD;IADC,OAAO,EAAE;;;;+CACuC;AAOjD;IADC,OAAO,EAAE;;;;sDAC+C;AAOzD;IADC,OAAO,EAAE;;;;6CAC4B;AA5C3B,WAAW;IARvB,MAAM,CAAC;QACN,UAAU,EAAE,aAAa;QACzB,MAAM,EAAE,0DAA0D;QAClE,SAAS,EAAE,aAAa;QACxB,IAAI,EAAE,sDAAsD;QAC5D,SAAS,EAAE,CAAC,SAAS,CAAC;KACvB,CAAC;GAEW,WAAW,CAmDvB;SAnDY,WAAW","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Stepcounter\n * @description\n * Cordova plugin for using device's stepcounter on Android (API > 19)\n *\n * Use to\n * - start and stop stepcounter service\n * - read device's stepcounter data\n *\n * @usage\n * ```typescript\n * import { Stepcounter } from '@ionic-native/stepcounter';\n *\n * constructor(private stepcounter: Stepcounter) { }\n *\n * ...\n *\n * let startingOffset = 0;\n * this.stepcounter.start(startingOffset).then(onSuccess => console.log('stepcounter-start success', onSuccess), onFailure => console.log('stepcounter-start error', onFailure));\n *\n * this.stepcounter.getHistory().then(historyObj => console.log('stepcounter-history success', historyObj), onFailure => console.log('stepcounter-history error', onFailure));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Stepcounter',\n  plugin: 'https://github.com/Slidee/cordova-plugin-stepcounter.git',\n  pluginRef: 'stepcounter',\n  repo: 'https://github.com/Slidee/cordova-plugin-stepcounter',\n  platforms: ['Android']\n})\n\nexport class Stepcounter extends IonicNativePlugin {\n\n  /**\n   * Start the step counter\n   *\n   * @param startingOffset {number} will be added to the total steps counted in this session\n   * @returns {Promise<any | number>} Returns a Promise that resolves on success or rejects on failure\n   */\n  @Cordova()\n  start(startingOffset: number): Promise<number | any> { return; }\n\n  /**\n   * Stop the step counter\n   * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps since the start command has been called, or rejects on failure\n   */\n  @Cordova()\n  stop(): Promise<number | any> { return; }\n\n  /**\n   * Get the amount of steps for today (or -1 if it no data given)\n   * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps today, or rejects on failure\n   */\n  @Cordova()\n  getTodayStepCount(): Promise<number | any> { return; }\n\n  /**\n   * Get the amount of steps since the start command has been called\n   * @returns {Promise<any | number>} Returns a Promise that resolves on success with the amount of steps since the start command has been called, or rejects on failure\n   */\n  @Cordova()\n  getStepCount(): Promise<number | any> { return; }\n\n  /**\n   * Returns true/false if Android device is running >API level 19 && has the step counter API available\n   * @returns {Promise<any | boolean>} Returns a Promise that resolves on success, or rejects on failure\n   */\n  @Cordova()\n  deviceCanCountSteps(): Promise<boolean | any> { return; }\n\n  /**\n   * Get the step history (JavaScript object)\n   * @returns {Promise<any>} Returns a Promise that resolves on success, or rejects on failure\n   */\n  @Cordova()\n  getHistory(): Promise<any> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}